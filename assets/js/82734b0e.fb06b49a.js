"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[981],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2587:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l="Create your first test",u={unversionedId:"create-your-first-test",id:"create-your-first-test",title:"Create your first test",description:"Setup your test file",source:"@site/docs/create-your-first-test.md",sourceDirName:".",slug:"/create-your-first-test",permalink:"/docs/create-your-first-test",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/create-your-first-test.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/intro"},next:{title:"Scenario Context",permalink:"/docs/Features/scenario-context"}},p=[{value:"Setup your test file",id:"setup-your-test-file",children:[],level:2},{value:"Creating the feature file",id:"creating-the-feature-file",children:[],level:2},{value:"Creating the step definitions file",id:"creating-the-step-definitions-file",children:[{value:"Usage",id:"usage",children:[],level:3}],level:2}],c={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-your-first-test"},"Create your first test"),(0,i.kt)("h2",{id:"setup-your-test-file"},"Setup your test file"),(0,i.kt)("p",null,"If you didn't change the base folder in your setup test file :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { loadStepsJest } from "specflow-emulator";\n\nloadStepsJest();\n')),(0,i.kt)("p",null,"That's mean, you will have to create a folder ",(0,i.kt)("inlineCode",{parentName:"p"},"__features__")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),", then you can create folders or directly create test files."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"specflow-emulator")," provide a new way to use ",(0,i.kt)("inlineCode",{parentName:"p"},"cucumber")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"jest-cucumber"),", first you will have to create a test file name like: ",(0,i.kt)("inlineCode",{parentName:"p"},"nameOfYourFile.steps.js"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'// nameOfYourFile.steps.js\nimport { defineFeature } from "specflow-emulator";\n\n// Here you can change the path to your .feature file\ndefineFeature("./nameOfYourFile.feature");\n')),(0,i.kt)("h2",{id:"creating-the-feature-file"},"Creating the feature file"),(0,i.kt)("p",null,"Then create your scenario inside your ",(0,i.kt)("inlineCode",{parentName:"p"},".feature"),", like this basic scenario:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'Feature: Simple Calculator\n\n    Scenario: Simple addition\n        Given number "2"\n        And number "1"\n        When I add them\n        Then the result should be "3"\n\n    Scenario: Simple multiplication\n        Given number "5"\n        And number "2"\n        When I multiple them\n        Then the result should be "10"\n')),(0,i.kt)("h2",{id:"creating-the-step-definitions-file"},"Creating the step definitions file"),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"YourFileName.stepdefinitions.js")," file that will contains your steps, first you will have to import ",(0,i.kt)("inlineCode",{parentName:"p"},"defineSteps")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"specflow-emulator"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { defineSteps } from "specflow-emulator";\n\nexport const stepDefinitions = defineSteps();\n')),(0,i.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Exporting")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Don't forget to export this const in order to provide the steps to ",(0,i.kt)("inlineCode",{parentName:"p"},"specflow-emulator"),", if you don't do that, it will never be possible to provide your steps to the pool."))),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("p",null,"You will need to provide two argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"defineSteps")," function, the first one is an array of object, provide inside the feature argument the real name of your scenario, the second argument is a callback that give you Given | When | Then function used them to bind those function with the feature file, With our example it would be like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'export const stepDefinitions = defineSteps(\n  [{ feature: "Simple Calculator", tag: "feature" }],\n  ({ Given, When, Then }) => {\n\n  }\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Given"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"When"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Then")," functions take two callback, the first one is generated by ",(0,i.kt)("inlineCode",{parentName:"p"},"specflow-emulator")," that gave you a scenarioContext, in order to share between step datas, the second one is your variables coming from the scenario itself, if you got 2 variables, you will need to provide two argument to the function."),(0,i.kt)("p",null,"In our case, it would be like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { defineSteps } from "specflow-emulator";\n\nexport const stepDefinitions = defineSteps(\n  [{ feature: "Simple Calculator", tag: "feature" }],\n  ({ Given, When, Then }) => {\n    Given(/^number "(.*)"$/, (scenarioContext) => (number) => {\n      if (scenarioContext.number) {\n        scenarioContext.number.push(number);\n      } else {\n        scenarioContext.number = [number];\n      }\n    });\n\n    When("I add them", (scenarioContext) => (number) => {\n      scenarioContext.result =\n        +scenarioContext.number[0] + +scenarioContext.number[1];\n    });\n\n    When("I multiple them", (scenarioContext) => (number) => {\n      scenarioContext.result =\n        +scenarioContext.number[0] * +scenarioContext.number[1];\n    });\n\n    Then(/^the result should be "(.*)"$/, (scenarioContext) => (number) => {\n      expect(scenarioContext.result).toBe(+number);\n    });\n  }\n);\n')))}d.isMDXComponent=!0}}]);